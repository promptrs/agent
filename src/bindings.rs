// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod promptrs {
    pub mod client {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod completion {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Message {
                System(_rt::String),
                User(_rt::String),
                Assistant(_rt::String),
                ToolCall((_rt::String, _rt::String)),
                Status((_rt::String, _rt::String)),
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Message::System(e) => {
                            f.debug_tuple("Message::System").field(e).finish()
                        }
                        Message::User(e) => {
                            f.debug_tuple("Message::User").field(e).finish()
                        }
                        Message::Assistant(e) => {
                            f.debug_tuple("Message::Assistant").field(e).finish()
                        }
                        Message::ToolCall(e) => {
                            f.debug_tuple("Message::ToolCall").field(e).finish()
                        }
                        Message::Status(e) => {
                            f.debug_tuple("Message::Status").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct Params {
                pub model: _rt::String,
                pub temperature: Option<f64>,
                pub top_p: Option<f64>,
                pub messages: _rt::Vec<Message>,
                pub stream: bool,
            }
            impl ::core::fmt::Debug for Params {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Params")
                        .field("model", &self.model)
                        .field("temperature", &self.temperature)
                        .field("top-p", &self.top_p)
                        .field("messages", &self.messages)
                        .field("stream", &self.stream)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Request {
                pub api_key: Option<_rt::String>,
                pub base_url: _rt::String,
                pub body: Params,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("api-key", &self.api_key)
                        .field("base-url", &self.base_url)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ToolCall {
                pub name: _rt::String,
                pub arguments: _rt::String,
            }
            impl ::core::fmt::Debug for ToolCall {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCall")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub text: _rt::String,
                pub tool_calls: _rt::Vec<ToolCall>,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("text", &self.text)
                        .field("tool-calls", &self.tool_calls)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn receive(payload: &Request) -> Result<Response, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 5 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 5
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Request {
                        api_key: api_key0,
                        base_url: base_url0,
                        body: body0,
                    } = payload;
                    let (result2_0, result2_1, result2_2) = match api_key0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let vec3 = base_url0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let Params {
                        model: model4,
                        temperature: temperature4,
                        top_p: top_p4,
                        messages: messages4,
                        stream: stream4,
                    } = body0;
                    let vec5 = model4;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    let (result6_0, result6_1) = match temperature4 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    let (result7_0, result7_1) = match top_p4 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    let vec17 = messages4;
                    let len17 = vec17.len();
                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec17.len() * (5 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result17 = if layout17.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout17);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec17.into_iter().enumerate() {
                        let base = result17
                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                Message::System(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec8 = e;
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                Message::User(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec9 = e;
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                Message::Assistant(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    let vec10 = e;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                Message::ToolCall(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let (t11_0, t11_1) = e;
                                    let vec12 = t11_0;
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                    let vec13 = t11_1;
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                Message::Status(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let (t14_0, t14_1) = e;
                                    let vec15 = t14_0;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                    let vec16 = t14_1;
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                            }
                        }
                    }
                    let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "promptrs:client/completion@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "receive"]
                        fn wit_import19(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: f64,
                            _: i32,
                            _: f64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import19(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: f64,
                        _: i32,
                        _: f64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import19(
                            result2_0,
                            result2_1,
                            result2_2,
                            ptr3.cast_mut(),
                            len3,
                            ptr5.cast_mut(),
                            len5,
                            result6_0,
                            result6_1,
                            result7_0,
                            result7_1,
                            result17,
                            len17,
                            match stream4 {
                                true => 1,
                                false => 0,
                            },
                            ptr18,
                        )
                    };
                    let l20 = i32::from(*ptr18.add(0).cast::<u8>());
                    let result36 = match l20 {
                        0 => {
                            let e = {
                                let l21 = *ptr18
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr18
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(
                                    l21.cast(),
                                    len23,
                                    len23,
                                );
                                let l24 = *ptr18
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l25 = *ptr18
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base32 = l24;
                                let len32 = l25;
                                let mut result32 = _rt::Vec::with_capacity(len32);
                                for i in 0..len32 {
                                    let base = base32
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e32 = {
                                        let l26 = *base.add(0).cast::<*mut u8>();
                                        let l27 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len28 = l27;
                                        let bytes28 = _rt::Vec::from_raw_parts(
                                            l26.cast(),
                                            len28,
                                            len28,
                                        );
                                        let l29 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l30 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 = _rt::Vec::from_raw_parts(
                                            l29.cast(),
                                            len31,
                                            len31,
                                        );
                                        ToolCall {
                                            name: _rt::string_lift(bytes28),
                                            arguments: _rt::string_lift(bytes31),
                                        }
                                    };
                                    result32.push(e32);
                                }
                                _rt::cabi_dealloc(
                                    base32,
                                    len32 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                Response {
                                    text: _rt::string_lift(bytes23),
                                    tool_calls: result32,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l33 = *ptr18
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l34 = *ptr18
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len35 = l34;
                                let bytes35 = _rt::Vec::from_raw_parts(
                                    l33.cast(),
                                    len35,
                                    len35,
                                );
                                _rt::string_lift(bytes35)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout17.size() != 0 {
                        _rt::alloc::dealloc(result17.cast(), layout17);
                    }
                    result36
                }
            }
        }
    }
    pub mod parser {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod response {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct Delims {
                pub reasoning: Option<(_rt::String, _rt::String)>,
                pub tool_call: (_rt::String, _rt::String),
            }
            impl ::core::fmt::Debug for Delims {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Delims")
                        .field("reasoning", &self.reasoning)
                        .field("tool-call", &self.tool_call)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ToolCall {
                pub name: _rt::String,
                pub arguments: _rt::String,
            }
            impl ::core::fmt::Debug for ToolCall {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCall")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub reasoning: Option<_rt::String>,
                pub content: _rt::String,
                pub tool_calls: _rt::Vec<ToolCall>,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("reasoning", &self.reasoning)
                        .field("content", &self.content)
                        .field("tool-calls", &self.tool_calls)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn parse(response: &str, delims: Option<&Delims>) -> Response {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 7 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 7
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = response;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let (
                        result9_0,
                        result9_1,
                        result9_2,
                        result9_3,
                        result9_4,
                        result9_5,
                        result9_6,
                        result9_7,
                        result9_8,
                        result9_9,
                    ) = match delims {
                        Some(e) => {
                            let Delims {
                                reasoning: reasoning1,
                                tool_call: tool_call1,
                            } = e;
                            let (
                                result5_0,
                                result5_1,
                                result5_2,
                                result5_3,
                                result5_4,
                            ) = match reasoning1 {
                                Some(e) => {
                                    let (t2_0, t2_1) = e;
                                    let vec3 = t2_0;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    let vec4 = t2_1;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    (1i32, ptr3.cast_mut(), len3, ptr4.cast_mut(), len4)
                                }
                                None => {
                                    (
                                        0i32,
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        ::core::ptr::null_mut(),
                                        0usize,
                                    )
                                }
                            };
                            let (t6_0, t6_1) = tool_call1;
                            let vec7 = t6_0;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            let vec8 = t6_1;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            (
                                1i32,
                                result5_0,
                                result5_1,
                                result5_2,
                                result5_3,
                                result5_4,
                                ptr7.cast_mut(),
                                len7,
                                ptr8.cast_mut(),
                                len8,
                            )
                        }
                        None => {
                            (
                                0i32,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "promptrs:parser/response@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "parse"]
                        fn wit_import11(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            ptr0.cast_mut(),
                            len0,
                            result9_0,
                            result9_1,
                            result9_2,
                            result9_3,
                            result9_4,
                            result9_5,
                            result9_6,
                            result9_7,
                            result9_8,
                            result9_9,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let l16 = *ptr10
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l17 = *ptr10
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len18 = l17;
                    let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                    let l19 = *ptr10
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l20 = *ptr10
                        .add(6 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base27 = l19;
                    let len27 = l20;
                    let mut result27 = _rt::Vec::with_capacity(len27);
                    for i in 0..len27 {
                        let base = base27
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e27 = {
                            let l21 = *base.add(0).cast::<*mut u8>();
                            let l22 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len23 = l22;
                            let bytes23 = _rt::Vec::from_raw_parts(
                                l21.cast(),
                                len23,
                                len23,
                            );
                            let l24 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l25 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len26 = l25;
                            let bytes26 = _rt::Vec::from_raw_parts(
                                l24.cast(),
                                len26,
                                len26,
                            );
                            ToolCall {
                                name: _rt::string_lift(bytes23),
                                arguments: _rt::string_lift(bytes26),
                            }
                        };
                        result27.push(e27);
                    }
                    _rt::cabi_dealloc(
                        base27,
                        len27 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result28 = Response {
                        reasoning: match l12 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l13 = *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l14 = *ptr10
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len15 = l14;
                                    let bytes15 = _rt::Vec::from_raw_parts(
                                        l13.cast(),
                                        len15,
                                        len15,
                                    );
                                    _rt::string_lift(bytes15)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        content: _rt::string_lift(bytes18),
                        tool_calls: result27,
                    };
                    result28
                }
            }
        }
    }
    pub mod tools {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod caller {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct System {
                pub prompt: _rt::String,
                pub status_call: _rt::String,
            }
            impl ::core::fmt::Debug for System {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("System")
                        .field("prompt", &self.prompt)
                        .field("status-call", &self.status_call)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ToolDelims {
                pub available_tools: (_rt::String, _rt::String),
                pub tool_call: (_rt::String, _rt::String),
            }
            impl ::core::fmt::Debug for ToolDelims {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolDelims")
                        .field("available-tools", &self.available_tools)
                        .field("tool-call", &self.tool_call)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ToolResponse {
                pub output: _rt::String,
                pub status: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ToolResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolResponse")
                        .field("output", &self.output)
                        .field("status", &self.status)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Tooling {
                handle: _rt::Resource<Tooling>,
            }
            impl Tooling {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Tooling {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "promptrs:tools/caller@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]tooling"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Tooling {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(config: &str) -> Self {
                    unsafe {
                        let vec0 = config;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "promptrs:tools/caller@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]tooling"]
                            fn wit_import1(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                        unsafe { Tooling::from_handle(ret as u32) }
                    }
                }
            }
            impl Tooling {
                #[allow(unused_unsafe, clippy::all)]
                pub fn init(&self, delims: &ToolDelims) -> System {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ToolDelims {
                            available_tools: available_tools0,
                            tool_call: tool_call0,
                        } = delims;
                        let (t1_0, t1_1) = available_tools0;
                        let vec2 = t1_0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec3 = t1_1;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let (t4_0, t4_1) = tool_call0;
                        let vec5 = t4_0;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        let vec6 = t4_1;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "promptrs:tools/caller@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]tooling.init"]
                            fn wit_import8(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import8(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import8(
                                (self).handle() as i32,
                                ptr2.cast_mut(),
                                len2,
                                ptr3.cast_mut(),
                                len3,
                                ptr5.cast_mut(),
                                len5,
                                ptr6.cast_mut(),
                                len6,
                                ptr7,
                            )
                        };
                        let l9 = *ptr7.add(0).cast::<*mut u8>();
                        let l10 = *ptr7
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len11 = l10;
                        let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);
                        let l12 = *ptr7
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l13 = *ptr7
                            .add(3 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len14 = l13;
                        let bytes14 = _rt::Vec::from_raw_parts(l12.cast(), len14, len14);
                        let result15 = System {
                            prompt: _rt::string_lift(bytes11),
                            status_call: _rt::string_lift(bytes14),
                        };
                        result15
                    }
                }
            }
            impl Tooling {
                #[allow(unused_unsafe, clippy::all)]
                pub fn prompt(&self, content: &str) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = content;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "promptrs:tools/caller@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]tooling.prompt"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result10 = match l3 {
                            0 => {
                                let e = {
                                    let l4 = *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        l4.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l7 = *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len9 = l8;
                                    let bytes9 = _rt::Vec::from_raw_parts(
                                        l7.cast(),
                                        len9,
                                        len9,
                                    );
                                    _rt::string_lift(bytes9)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result10
                    }
                }
            }
            impl Tooling {
                #[allow(unused_unsafe, clippy::all)]
                pub fn status(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "promptrs:tools/caller@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]tooling.status"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Tooling {
                #[allow(unused_unsafe, clippy::all)]
                pub fn call(&self, name: &str, arguments: &str) -> ToolResponse {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 5 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 5
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = arguments;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "promptrs:tools/caller@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]tooling.call"]
                            fn wit_import3(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import3(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import3(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1.cast_mut(),
                                len1,
                                ptr2,
                            )
                        };
                        let l4 = *ptr2.add(0).cast::<*mut u8>();
                        let l5 = *ptr2
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                        let l7 = i32::from(
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>(),
                        );
                        let result11 = ToolResponse {
                            output: _rt::string_lift(bytes6),
                            status: match l7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l8 = *ptr2
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l9 = *ptr2
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        _rt::string_lift(bytes10)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        };
                        result11
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod promptrs {
        pub mod agent {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod runner {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::run(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec4 = (result2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr3.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                    *ptr3.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_run<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    fn run(input: _rt::String, config: _rt::String) -> _rt::String;
                }
                #[doc(hidden)]
                macro_rules! __export_promptrs_agent_runner_0_3_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "promptrs:agent/runner@0.3.0#run")] unsafe extern "C" fn
                        export_run(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 :
                        usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_run_cabi::<$ty > (arg0, arg1, arg2, arg3) } } #[unsafe
                        (export_name = "cabi_post_promptrs:agent/runner@0.3.0#run")]
                        unsafe extern "C" fn _post_return_run(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_run::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_promptrs_agent_runner_0_3_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_agent_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::promptrs::agent::runner::__export_promptrs_agent_runner_0_3_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::promptrs::agent::runner);
    };
}
#[doc(inline)]
pub(crate) use __export_agent_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:promptrs:agent@0.3.0:agent:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1172] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x98\x08\x01A\x02\x01\
A\x08\x01B\x12\x01o\x02ss\x01q\x05\x06system\x01s\0\x04user\x01s\0\x09assistant\x01\
s\0\x09tool-call\x01\0\0\x06status\x01\0\0\x04\0\x07message\x03\0\x01\x01ku\x01p\
\x02\x01r\x05\x05models\x0btemperature\x03\x05top-p\x03\x08messages\x04\x06strea\
m\x7f\x04\0\x06params\x03\0\x05\x01ks\x01r\x03\x07api-key\x07\x08base-urls\x04bo\
dy\x06\x04\0\x07request\x03\0\x08\x01r\x02\x04names\x09argumentss\x04\0\x09tool-\
call\x03\0\x0a\x01p\x0b\x01r\x02\x04texts\x0atool-calls\x0c\x04\0\x08response\x03\
\0\x0d\x01j\x01\x0e\x01s\x01@\x01\x07payload\x09\0\x0f\x04\0\x07receive\x01\x10\x03\
\0\x20promptrs:client/completion@0.2.0\x05\0\x01B\x0d\x01o\x02ss\x01k\0\x01r\x02\
\x09reasoning\x01\x09tool-call\0\x04\0\x06delims\x03\0\x02\x01r\x02\x04names\x09\
argumentss\x04\0\x09tool-call\x03\0\x04\x01ks\x01p\x05\x01r\x03\x09reasoning\x06\
\x07contents\x0atool-calls\x07\x04\0\x08response\x03\0\x08\x01k\x03\x01@\x02\x08\
responses\x06delims\x0a\0\x09\x04\0\x05parse\x01\x0b\x03\0\x1epromptrs:parser/re\
sponse@0.2.0\x05\x01\x01B\x16\x01r\x02\x06prompts\x0bstatus-calls\x04\0\x06syste\
m\x03\0\0\x01o\x02ss\x01r\x02\x0favailable-tools\x02\x09tool-call\x02\x04\0\x0bt\
ool-delims\x03\0\x03\x01ks\x01r\x02\x06outputs\x06status\x05\x04\0\x0dtool-respo\
nse\x03\0\x06\x04\0\x07tooling\x03\x01\x01i\x08\x01@\x01\x06configs\0\x09\x04\0\x14\
[constructor]tooling\x01\x0a\x01h\x08\x01@\x02\x04self\x0b\x06delims\x04\0\x01\x04\
\0\x14[method]tooling.init\x01\x0c\x01j\x01s\x01s\x01@\x02\x04self\x0b\x07conten\
ts\0\x0d\x04\0\x16[method]tooling.prompt\x01\x0e\x01@\x01\x04self\x0b\0s\x04\0\x16\
[method]tooling.status\x01\x0f\x01@\x03\x04self\x0b\x04names\x09argumentss\0\x07\
\x04\0\x14[method]tooling.call\x01\x10\x03\0\x1bpromptrs:tools/caller@0.3.0\x05\x02\
\x01B\x02\x01@\x02\x05inputs\x06configs\0s\x04\0\x03run\x01\0\x04\0\x1bpromptrs:\
agent/runner@0.3.0\x05\x03\x04\0\x1apromptrs:agent/agent@0.3.0\x04\0\x0b\x0b\x01\
\0\x05agent\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
